import flet as ft
from ui_components import AIOCRAppUI
from models import create_db_and_tables

def main(page: ft.Page):
    create_db_and_tables() # Initialize database and tables
    ui = AIOCRAppUI(page)

ft.app(target=main)

'''
PythonにおけるFletを利用してAI-OCRデスクトップアプリを開発したい。
そのため、はじめにUI画面を作成していきたい。 以下は、UIに関する作成条件になります。

▼条件
1. UIを作成するにあたってui_components.pyにてUIコンポーネントクラスを記述してもらいたい
2. ui_components.pyでクラス化したオブジェクトをmain.pyにて呼び出し、アプリを実行したい
3. ui_components.pyにて作成してもらいたいUIは添付した画像をもとに実施してほしい（機能などはひとまずいらない）

上記を満たす形で正常に動作するアプリケーションを開発してください。
'''
'''
以下の指示に従ってコーディングを実施してください。

▼指示内容
1. 添付画像に沿ってデータ項目設定画面を作成してください。
2. サイドバーにある「データ項目設定」ボタンを押下するとページ遷移するためのコードを追加してください。
3. 添付画像のように、「＋ データ項目追加」ボタンを押下するとデータ項目1のように任意で項目を追加できるよう実装してください。
4. データ項目2以降は、右端に✕ボタンアイコンを設置し、削除できるように実装してください。
5. データ項目追加ボタンの下に、左を「新規保存」ボタン、右を「条件更新」ボタンを設置し実装してください。
6. 新規保存した条件はテーブルに追加され確認できるよう実装してください。

上記を満たす形でUIを実装してください。
なお、以下は現在のui_components.pyのコードになります。
'''
'''
data_settings.pyにてSQLiteとSQLAlchemyを利用してデータ項目設定画面の新規保存ボタンを押下するとDB保存するコーディングを実施したい。
また、保存した条件のsettingsアイコンボタンを押下するとデータ項目設定画面に反映され編集が実施できるよう実装したい。
さらに、ゴミ箱アイコンボタンを押下するとDBから削除したい。

上記を満たす形で最適な実装とDB設計を実現してください。
必要であれば、ファイル作成と各種インストール・インポートの指示をください。
'''
'''
ocr_list.pyにてdata_settings.py同様UIクラスと処理を行う関数を実装したい。
そのため、ocr_list.pyに以下の実装を実施したい。

▼実装内容
1. リスト名と入力欄を上部に設置
2. 新規保存ボタンとリスト名更新ボタンを設置
3. 保存したリストテーブルを設置（リスト名、編集ボタン、削除ボタン）
4. models.pyに1~3を満たす形でDB操作が実施できるよう実装

上記を満たす形で最適な実装とDB設計を実現してください。
また、UIはdata_settings.pyと同じよう実装してください。
'''
'''
改めて
file_manager.pyにてdata_settings.py同様UIクラスと処理を行う関数を実装したい。
そのため、file_manager.pyに以下の実装を実施したい。

▼実装内容
1. OCRリストと選択ボックスを上部に設置（選択ボックスは保存したOCRリストから選択できるように実装）
2. ファイルアップロード用UIを設置（ボタンによるアップロードとドラッグ＆ドロップの両方を可能にし、複数ファイルも可能にしたい）
3. 保存した各ファイル（.png, .jpg, .pdf）をリストテーブルで表示（ファイル名、削除ボタン）
3-1. リストテーブルはチェックボックスにて選択ができ、テーブル上部に一括選択と一括削除ボタンを実装

OCRリストに紐づいてアップロードしたファイルをリストテーブルに表示したい。
上記を満たす形で最適な実装とDB設計を実現してください。
また、アップロードしたファイルの保存先フォルダはimagesを既に作成しています。
'''
'''
scan.pyにてdata_settings.pyやocr_list.pyやfile_manager.py同様のUIクラスと処理を行う関数を実装したい。
そのため、scan.pyに以下の実装を実施したい。

▼実装内容
1. OCRリストと選択ボックスを上部に設置（選択ボックスは保存したOCRリストから選択できるように実装）
2. 条件選択と選択ボックスを設置（選択ボックスは保存した条件リストから選択できるように実装）
3. ファイルリストテーブルを設置（ファイル名、プログレスバー、スキャンボタン）
4. ファイルリストテーブルは各リストに対してクリックしダイアログを表示
5. クリックされたリストはダイアログにて抽出したデータを表示すること（抽出していない場合はスキャンしてくださいという文言でOK）

▼機能に対する実装内容
1. スキャンボタンにて実行される機能はgeminiのAPIを利用し、選択した条件に沿ったデータ項目を抽出
2. スキャン中はプログレスバーにて実行中のパーセント（難しい場合は抽出中というテキスト表示）を表示する
3. スキャン済みのファイルはスキャン済みといったフラグ（DBにも反映）を持たせたい
4. スキャンしたデータはスキャンフラグ済みのみリストidと紐づけリストデータとして保持したい。（DBにも反映）

上記を満たす形で最適な実装とDB設計を実現してください。
また、gemini APIなど必要なAPIキーはすでにあるため、考慮して実施して構いません。
'''
'''
export.pyにてdata_settings.pyやocr_list.pyやfile_manager.py同様のUIクラスと処理を行う関数を実装したい。
そのため、export.pyに以下の実装を実施したい。

▼実装内容
1. OCRリストと選択ボックスを上部に設置（選択ボックスは保存したOCRリストから選択できるように実装）
2. 出力ファイル選択と選択ボックスを設置（選択ボックスはCSVかExcelから選択できるように実装）
3. ファイルダウンロードボタンを設置
4. ファイルリストテーブルを設置（DBにあるscanned_dataからdata_items_nameに沿って動的に列を生成）

▼機能に対する実装内容
1. ファイルダウンロードボタンを押下後、選択されたファイル形式に合わせてファイルダウンロード

上記を満たす形で最適な実装とDB設計を実現してください。
'''